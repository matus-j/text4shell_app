package com.exploit.controller;

import org.apache.commons.text.StringSubstitutor;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

@RestController
public class EndpointController {

    private final StringSubstitutor interpolator;

    //Constructor
    public EndpointController() {
        Properties properties = System.getProperties();

        properties.put("Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam n" +
                "onumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.", "script, dns");
        System.out.println("Properties: " + properties);

        interpolator = StringSubstitutor.createInterpolator();
    }

    @RequestMapping("/exploit")
    public String useApacheCommonsTextReplaceMethod(@RequestParam(value="input", defaultValue="Text4Shell vulnerable endpoint.") String input)
    {
        try {
            // call the vulnerable method ( replace, replaceIn )
            String result = "Interpolated: " + interpolator.replace(input);
            return result;
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    //endpoint for frontend app
    @CrossOrigin(origins = "*")
    @RequestMapping("/exploit_json")
    @ResponseBody
    public Map<String, String> RESTEndpointTest(@RequestParam(value="input", defaultValue="Text4Shell vulnerable endpoint.") String input)
    {
        Map<String, String> result = new HashMap<>();

        try {
            // call the vulnerable method ( replace, replaceIn )
            result.put("interpolated", interpolator.replace(input));
            // add the String before the interpolation to the result
            result.put("input", input);
        } catch (Exception e) {
            result.put("error", e.getMessage());
        }

        return result;
    }
}
